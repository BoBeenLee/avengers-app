// tslint:disable
/**
 * Shecret API
 * Shecret API 명세
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 자주 묻는 질문의 답변
 * @export
 * @interface Answer
 */
export interface Answer {
    /**
     * 
     * @type {string}
     * @memberof Answer
     */
    content?: string;
}
/**
 * 
 * @export
 * @interface Article
 */
export interface Article {
    /**
     * 
     * @type {number}
     * @memberof Article
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    content?: string;
    /**
     * 
     * @type {User}
     * @memberof Article
     */
    user?: User;
    /**
     * 
     * @type {Array<ArticleFeedBack>}
     * @memberof Article
     */
    articleFeedBacks?: Array<ArticleFeedBack>;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    createdDate?: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    modifiedDate?: string;
}
/**
 * 
 * @export
 * @interface ArticleFeedBack
 */
export interface ArticleFeedBack {
    /**
     * 
     * @type {number}
     * @memberof ArticleFeedBack
     */
    id?: number;
    /**
     * 
     * @type {Article}
     * @memberof ArticleFeedBack
     */
    article?: Article;
    /**
     * 
     * @type {User}
     * @memberof ArticleFeedBack
     */
    user?: User;
    /**
     * 
     * @type {string}
     * @memberof ArticleFeedBack
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleFeedBack
     */
    content?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleFeedBack
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleFeedBack
     */
    modifiedAt?: string;
}
/**
 * 게시글 피드백 시 사용되는 객체
 * @export
 * @interface ArticleFeedbackRequest
 */
export interface ArticleFeedbackRequest {
    /**
     * 사용자가 입력한 피드백의 제목
     * @type {string}
     * @memberof ArticleFeedbackRequest
     */
    title: string;
    /**
     * 사용자가 입력한 피드백의 내용
     * @type {string}
     * @memberof ArticleFeedbackRequest
     */
    content: string;
}
/**
 * 
 * @export
 * @interface ArticleFeedbackResponse
 */
export interface ArticleFeedbackResponse {
    /**
     * 
     * @type {Article}
     * @memberof ArticleFeedbackResponse
     */
    article?: Article;
    /**
     * 
     * @type {string}
     * @memberof ArticleFeedbackResponse
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleFeedbackResponse
     */
    content?: string;
}
/**
 * 게시글 작성 시 사용되는 요청객체.
 * @export
 * @interface ArticleWriteRequest
 */
export interface ArticleWriteRequest {
    /**
     * 사용자가 입력한 게시글의 제목
     * @type {string}
     * @memberof ArticleWriteRequest
     */
    title: string;
    /**
     * 사용자가 입력한 게시글의 내용
     * @type {string}
     * @memberof ArticleWriteRequest
     */
    content: string;
}
/**
 * 회원가입을 위하여 사용되는 토큰. 10분간 유효함.
 * @export
 * @interface AuthenticationToken
 */
export interface AuthenticationToken {
    /**
     * 회원가입 토큰
     * @type {string}
     * @memberof AuthenticationToken
     */
    token?: string;
}
/**
 * 
 * @export
 * @interface Faq
 */
export interface Faq {
    /**
     * 
     * @type {Question}
     * @memberof Faq
     */
    question?: Question;
    /**
     * 
     * @type {Answer}
     * @memberof Faq
     */
    answer?: Answer;
}
/**
 * 
 * @export
 * @interface GrantedAuthority
 */
export interface GrantedAuthority {
    /**
     * 
     * @type {string}
     * @memberof GrantedAuthority
     */
    authority?: string;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    deviceId?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    appId?: string;
}
/**
 * 로그인 객체
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * 로그인 성공 시 내려가는 token 정보. 이후 헤더에 \'token\'값을 포함시켜 전송해야한다. 
     * @type {string}
     * @memberof LoginResponse
     */
    token?: string;
}
/**
 * 
 * @export
 * @interface Notice
 */
export interface Notice {
    /**
     * 
     * @type {string}
     * @memberof Notice
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof Notice
     */
    content?: string;
    /**
     * 
     * @type {string}
     * @memberof Notice
     */
    writeTime?: string;
}
/**
 * 
 * @export
 * @interface Pageable
 */
export interface Pageable {
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    page?: number;
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    size?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Pageable
     */
    sort?: Array<string>;
}
/**
 * 자주 묻는 질문
 * @export
 * @interface Question
 */
export interface Question {
    /**
     * 질문 제목
     * @type {string}
     * @memberof Question
     */
    title?: string;
    /**
     * 질문 본문
     * @type {string}
     * @memberof Question
     */
    content?: string;
}
/**
 * 
 * @export
 * @interface SignupRequest
 */
export interface SignupRequest {
    /**
     * 
     * @type {string}
     * @memberof SignupRequest
     */
    token: string;
    /**
     * 
     * @type {string}
     * @memberof SignupRequest
     */
    deviceId: string;
    /**
     * 
     * @type {string}
     * @memberof SignupRequest
     */
    appId: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    deviceId?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    appId?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    password?: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    verify?: boolean;
    /**
     * 
     * @type {Array<Article>}
     * @memberof User
     */
    articles?: Array<Article>;
    /**
     * 
     * @type {Array<ArticleFeedBack>}
     * @memberof User
     */
    articleFeedBacks?: Array<ArticleFeedBack>;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    modifiedAt?: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    enabled?: boolean;
    /**
     * 
     * @type {Array<GrantedAuthority>}
     * @memberof User
     */
    authorities?: Array<GrantedAuthority>;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    username?: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    accountNonExpired?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    credentialsNonExpired?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    accountNonLocked?: boolean;
}

/**
 * Class01APIV1Api - axios parameter creator
 * @export
 */
export const Class01APIV1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 모든 필드는 필수값임.
         * @summary 로그인 API
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginRequest: LoginRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            if (loginRequest === null || loginRequest === undefined) {
                throw new RequiredError('loginRequest','Required parameter loginRequest was null or undefined when calling login.');
            }
            const localVarPath = `/v1/users/signin`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof loginRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(loginRequest !== undefined ? loginRequest : {}) : (loginRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * /v1/authentications/{deviceId} API를 통하여 얻은 token으로 회원가입 시도해야함.
         * @summary 회원가입 API
         * @param {SignupRequest} signupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signup: async (signupRequest: SignupRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'signupRequest' is not null or undefined
            if (signupRequest === null || signupRequest === undefined) {
                throw new RequiredError('signupRequest','Required parameter signupRequest was null or undefined when calling signup.');
            }
            const localVarPath = `/v1/users/signup`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof signupRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(signupRequest !== undefined ? signupRequest : {}) : (signupRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * Class01APIV1Api - functional programming interface
 * @export
 */
export const Class01APIV1ApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 모든 필드는 필수값임.
         * @summary 로그인 API
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginRequest: LoginRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await Class01APIV1ApiAxiosParamCreator(configuration).login(loginRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * /v1/authentications/{deviceId} API를 통하여 얻은 token으로 회원가입 시도해야함.
         * @summary 회원가입 API
         * @param {SignupRequest} signupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signup(signupRequest: SignupRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await Class01APIV1ApiAxiosParamCreator(configuration).signup(signupRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * Class01APIV1Api - factory interface
 * @export
 */
export const Class01APIV1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 모든 필드는 필수값임.
         * @summary 로그인 API
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginRequest: LoginRequest, options?: any): AxiosPromise<LoginResponse> {
            return Class01APIV1ApiFp(configuration).login(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * /v1/authentications/{deviceId} API를 통하여 얻은 token으로 회원가입 시도해야함.
         * @summary 회원가입 API
         * @param {SignupRequest} signupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signup(signupRequest: SignupRequest, options?: any): AxiosPromise<number> {
            return Class01APIV1ApiFp(configuration).signup(signupRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Class01APIV1Api - object-oriented interface
 * @export
 * @class Class01APIV1Api
 * @extends {BaseAPI}
 */
export class Class01APIV1Api extends BaseAPI {
    /**
     * 모든 필드는 필수값임.
     * @summary 로그인 API
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class01APIV1Api
     */
    public login(loginRequest: LoginRequest, options?: any) {
        return Class01APIV1ApiFp(this.configuration).login(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * /v1/authentications/{deviceId} API를 통하여 얻은 token으로 회원가입 시도해야함.
     * @summary 회원가입 API
     * @param {SignupRequest} signupRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class01APIV1Api
     */
    public signup(signupRequest: SignupRequest, options?: any) {
        return Class01APIV1ApiFp(this.configuration).signup(signupRequest, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * Class02APIApi - axios parameter creator
 * @export
 */
export const Class02APIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 마지막 24시간동안 인증을 시도한 횟수.
         * @summary 인증 횟수 조회
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findTodayAuthorizeCount: async (deviceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            if (deviceId === null || deviceId === undefined) {
                throw new RequiredError('deviceId','Required parameter deviceId was null or undefined when calling findTodayAuthorizeCount.');
            }
            const localVarPath = `/v1/authentications/{deviceId}/today-count`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (deviceId !== undefined) {
                localVarQueryParameter['deviceId'] = deviceId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 회원가입시 넘겨줘야 하는 토큰을 발급받는 API
         * @summary 회원가입 인증 토큰 발급
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tryAuthentication: async (deviceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            if (deviceId === null || deviceId === undefined) {
                throw new RequiredError('deviceId','Required parameter deviceId was null or undefined when calling tryAuthentication.');
            }
            const localVarPath = `/v1/authentications/{deviceId}`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * Class02APIApi - functional programming interface
 * @export
 */
export const Class02APIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 마지막 24시간동안 인증을 시도한 횟수.
         * @summary 인증 횟수 조회
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findTodayAuthorizeCount(deviceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await Class02APIApiAxiosParamCreator(configuration).findTodayAuthorizeCount(deviceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 회원가입시 넘겨줘야 하는 토큰을 발급받는 API
         * @summary 회원가입 인증 토큰 발급
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tryAuthentication(deviceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationToken>> {
            const localVarAxiosArgs = await Class02APIApiAxiosParamCreator(configuration).tryAuthentication(deviceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * Class02APIApi - factory interface
 * @export
 */
export const Class02APIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 마지막 24시간동안 인증을 시도한 횟수.
         * @summary 인증 횟수 조회
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findTodayAuthorizeCount(deviceId: string, options?: any): AxiosPromise<number> {
            return Class02APIApiFp(configuration).findTodayAuthorizeCount(deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 회원가입시 넘겨줘야 하는 토큰을 발급받는 API
         * @summary 회원가입 인증 토큰 발급
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tryAuthentication(deviceId: string, options?: any): AxiosPromise<AuthenticationToken> {
            return Class02APIApiFp(configuration).tryAuthentication(deviceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Class02APIApi - object-oriented interface
 * @export
 * @class Class02APIApi
 * @extends {BaseAPI}
 */
export class Class02APIApi extends BaseAPI {
    /**
     * 마지막 24시간동안 인증을 시도한 횟수.
     * @summary 인증 횟수 조회
     * @param {string} deviceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class02APIApi
     */
    public findTodayAuthorizeCount(deviceId: string, options?: any) {
        return Class02APIApiFp(this.configuration).findTodayAuthorizeCount(deviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 회원가입시 넘겨줘야 하는 토큰을 발급받는 API
     * @summary 회원가입 인증 토큰 발급
     * @param {string} deviceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class02APIApi
     */
    public tryAuthentication(deviceId: string, options?: any) {
        return Class02APIApiFp(this.configuration).tryAuthentication(deviceId, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * Class03Api - axios parameter creator
 * @export
 */
export const Class03ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findFaqList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/faqs`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findNoticeList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/notices`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * Class03Api - functional programming interface
 * @export
 */
export const Class03ApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findFaqList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Faq>>> {
            const localVarAxiosArgs = await Class03ApiAxiosParamCreator(configuration).findFaqList(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findNoticeList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Notice>>> {
            const localVarAxiosArgs = await Class03ApiAxiosParamCreator(configuration).findNoticeList(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * Class03Api - factory interface
 * @export
 */
export const Class03ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findFaqList(options?: any): AxiosPromise<Array<Faq>> {
            return Class03ApiFp(configuration).findFaqList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findNoticeList(options?: any): AxiosPromise<Array<Notice>> {
            return Class03ApiFp(configuration).findNoticeList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Class03Api - object-oriented interface
 * @export
 * @class Class03Api
 * @extends {BaseAPI}
 */
export class Class03Api extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class03Api
     */
    public findFaqList(options?: any) {
        return Class03ApiFp(this.configuration).findFaqList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class03Api
     */
    public findNoticeList(options?: any) {
        return Class03ApiFp(this.configuration).findNoticeList(options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * Class04APIV1Api - axios parameter creator
 * @export
 */
export const Class04APIV1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 게시글 작성 API
         * @summary 게시글 작성 API
         * @param {ArticleWriteRequest} articleWriteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleWrite: async (articleWriteRequest: ArticleWriteRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'articleWriteRequest' is not null or undefined
            if (articleWriteRequest === null || articleWriteRequest === undefined) {
                throw new RequiredError('articleWriteRequest','Required parameter articleWriteRequest was null or undefined when calling articleWrite.');
            }
            const localVarPath = `/v1/articles`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof articleWriteRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(articleWriteRequest !== undefined ? articleWriteRequest : {}) : (articleWriteRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 내가 조회한 게시글 리스트 API. page는 0부터 시작하며, Page, size를 지정하여 호출
         * @summary 내가 작성한 게시글 리스트 조회 API
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findArticleList: async (pageable: Pageable, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageable' is not null or undefined
            if (pageable === null || pageable === undefined) {
                throw new RequiredError('pageable','Required parameter pageable was null or undefined when calling findArticleList.');
            }
            const localVarPath = `/v1/articles`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageable !== undefined) {
                localVarQueryParameter['pageable'] = pageable;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 디버깅용
         * @summary 내가 작성한 피드백 리스트 조회 API
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findFeedbackList: async (pageable: Pageable, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageable' is not null or undefined
            if (pageable === null || pageable === undefined) {
                throw new RequiredError('pageable','Required parameter pageable was null or undefined when calling findFeedbackList.');
            }
            const localVarPath = `/v1/articles/{articleId}/feedback`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageable !== undefined) {
                localVarQueryParameter['pageable'] = pageable;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 피드백 작성 API
         * @summary 피드백 작성 API
         * @param {number} articleId 
         * @param {ArticleFeedbackRequest} articleFeedbackRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        writeFeedback: async (articleId: number, articleFeedbackRequest: ArticleFeedbackRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'articleId' is not null or undefined
            if (articleId === null || articleId === undefined) {
                throw new RequiredError('articleId','Required parameter articleId was null or undefined when calling writeFeedback.');
            }
            // verify required parameter 'articleFeedbackRequest' is not null or undefined
            if (articleFeedbackRequest === null || articleFeedbackRequest === undefined) {
                throw new RequiredError('articleFeedbackRequest','Required parameter articleFeedbackRequest was null or undefined when calling writeFeedback.');
            }
            const localVarPath = `/v1/articles/{articleId}/feedback`
                .replace(`{${"articleId"}}`, encodeURIComponent(String(articleId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof articleFeedbackRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(articleFeedbackRequest !== undefined ? articleFeedbackRequest : {}) : (articleFeedbackRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * Class04APIV1Api - functional programming interface
 * @export
 */
export const Class04APIV1ApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 게시글 작성 API
         * @summary 게시글 작성 API
         * @param {ArticleWriteRequest} articleWriteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async articleWrite(articleWriteRequest: ArticleWriteRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await Class04APIV1ApiAxiosParamCreator(configuration).articleWrite(articleWriteRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 내가 조회한 게시글 리스트 API. page는 0부터 시작하며, Page, size를 지정하여 호출
         * @summary 내가 작성한 게시글 리스트 조회 API
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findArticleList(pageable: Pageable, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Article>>> {
            const localVarAxiosArgs = await Class04APIV1ApiAxiosParamCreator(configuration).findArticleList(pageable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 디버깅용
         * @summary 내가 작성한 피드백 리스트 조회 API
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findFeedbackList(pageable: Pageable, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArticleFeedbackResponse>>> {
            const localVarAxiosArgs = await Class04APIV1ApiAxiosParamCreator(configuration).findFeedbackList(pageable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 피드백 작성 API
         * @summary 피드백 작성 API
         * @param {number} articleId 
         * @param {ArticleFeedbackRequest} articleFeedbackRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async writeFeedback(articleId: number, articleFeedbackRequest: ArticleFeedbackRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await Class04APIV1ApiAxiosParamCreator(configuration).writeFeedback(articleId, articleFeedbackRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * Class04APIV1Api - factory interface
 * @export
 */
export const Class04APIV1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 게시글 작성 API
         * @summary 게시글 작성 API
         * @param {ArticleWriteRequest} articleWriteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleWrite(articleWriteRequest: ArticleWriteRequest, options?: any): AxiosPromise<number> {
            return Class04APIV1ApiFp(configuration).articleWrite(articleWriteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 내가 조회한 게시글 리스트 API. page는 0부터 시작하며, Page, size를 지정하여 호출
         * @summary 내가 작성한 게시글 리스트 조회 API
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findArticleList(pageable: Pageable, options?: any): AxiosPromise<Array<Article>> {
            return Class04APIV1ApiFp(configuration).findArticleList(pageable, options).then((request) => request(axios, basePath));
        },
        /**
         * 디버깅용
         * @summary 내가 작성한 피드백 리스트 조회 API
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findFeedbackList(pageable: Pageable, options?: any): AxiosPromise<Array<ArticleFeedbackResponse>> {
            return Class04APIV1ApiFp(configuration).findFeedbackList(pageable, options).then((request) => request(axios, basePath));
        },
        /**
         * 피드백 작성 API
         * @summary 피드백 작성 API
         * @param {number} articleId 
         * @param {ArticleFeedbackRequest} articleFeedbackRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        writeFeedback(articleId: number, articleFeedbackRequest: ArticleFeedbackRequest, options?: any): AxiosPromise<number> {
            return Class04APIV1ApiFp(configuration).writeFeedback(articleId, articleFeedbackRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Class04APIV1Api - object-oriented interface
 * @export
 * @class Class04APIV1Api
 * @extends {BaseAPI}
 */
export class Class04APIV1Api extends BaseAPI {
    /**
     * 게시글 작성 API
     * @summary 게시글 작성 API
     * @param {ArticleWriteRequest} articleWriteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class04APIV1Api
     */
    public articleWrite(articleWriteRequest: ArticleWriteRequest, options?: any) {
        return Class04APIV1ApiFp(this.configuration).articleWrite(articleWriteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 내가 조회한 게시글 리스트 API. page는 0부터 시작하며, Page, size를 지정하여 호출
     * @summary 내가 작성한 게시글 리스트 조회 API
     * @param {Pageable} pageable 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class04APIV1Api
     */
    public findArticleList(pageable: Pageable, options?: any) {
        return Class04APIV1ApiFp(this.configuration).findArticleList(pageable, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 디버깅용
     * @summary 내가 작성한 피드백 리스트 조회 API
     * @param {Pageable} pageable 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class04APIV1Api
     */
    public findFeedbackList(pageable: Pageable, options?: any) {
        return Class04APIV1ApiFp(this.configuration).findFeedbackList(pageable, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 피드백 작성 API
     * @summary 피드백 작성 API
     * @param {number} articleId 
     * @param {ArticleFeedbackRequest} articleFeedbackRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class04APIV1Api
     */
    public writeFeedback(articleId: number, articleFeedbackRequest: ArticleFeedbackRequest, options?: any) {
        return Class04APIV1ApiFp(this.configuration).writeFeedback(articleId, articleFeedbackRequest, options).then((request) => request(this.axios, this.basePath));
    }

}


